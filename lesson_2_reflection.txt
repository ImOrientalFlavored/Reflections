How is the staging area different from the working directory and the
repository? What value do you think it offers?     
	The staging area is a prepratory step files from the working directory are placed in
	before committing into a repository. It helps organize the purpose of
	the commit.

How can you use the staging area to make sure you have one commit per
logical change?

	you can chose which file to add the staging area. Giving you
	control to which file you wish to commit and also have options to
	show status and compare the staging area with the previous recent
	commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When you'd like to add features to the project but may change the overall project you may want to make a branch
	which keeps changes away from the master branch and gives you freedom to make experiment

How do the diagrams help you visualize the branch structure?

	They display where on the tree a new branch is made and its parent

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Commits are joined together. Theyre interweaved and ordered chronologically opposed to them being seperated into to clumps of commits after another.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Like in most situations between automatic vs manual you trade off control for convenience or vice-versa.
	Having control has the added benefit of being able to handle conflicts or oversites.


//I realized kind of late that I answered the same questions twice.

What happens when you initialize a repository? Why do you need to do
it?
	Creates a hidden .git directory

	The .git directory is the repository that saves all your history and commit trees

How is the staging area different from the working directory and the
repository? What value do you think it offers?

	The staging area is a place to pass your changed files before a commit.
	This area helps organize the commit by grouping files that are logical to the intention of the commit.

How can you use the staging area to make sure you have one commit per
logical change?
	
	Same as above. Files relevant to the purpose of a change are grouped together as a single commit. 
	Maybe an example is, I change the title of my game and editted every file with the old game title to the new 
	title and committed as "changed game title"

What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

	
How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing
merges manually?
